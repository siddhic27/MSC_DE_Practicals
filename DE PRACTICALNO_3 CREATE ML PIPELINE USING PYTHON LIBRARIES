{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNyL3MSkgwZHVJfSg1UBlx/"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fLNunwF5bORq","executionInfo":{"status":"ok","timestamp":1710957941778,"user_tz":-330,"elapsed":61278,"user":{"displayName":"Dheeraj Mishra","userId":"03451996925460727889"}},"outputId":"15e95e8f-9d39-4f21-a8e2-f50d9acf0e83"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting pyspark\n","  Downloading pyspark-3.5.1.tar.gz (317.0 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m317.0/317.0 MB\u001b[0m \u001b[31m1.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: py4j==0.10.9.7 in /usr/local/lib/python3.10/dist-packages (from pyspark) (0.10.9.7)\n","Building wheels for collected packages: pyspark\n","  Building wheel for pyspark (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pyspark: filename=pyspark-3.5.1-py2.py3-none-any.whl size=317488491 sha256=9c02a95904be2b1a72b06bc30d8c313943f1075ddcbeaee579d1f1af051935f5\n","  Stored in directory: /root/.cache/pip/wheels/80/1d/60/2c256ed38dddce2fdd93be545214a63e02fbd8d74fb0b7f3a6\n","Successfully built pyspark\n","Installing collected packages: pyspark\n","Successfully installed pyspark-3.5.1\n"]}],"source":["pip install pyspark\n"]},{"cell_type":"code","source":["import pyspark\n","import pandas as pd\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.naive_bayes import GaussianNB\n","from sklearn.metrics import accuracy_score\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.decomposition import PCA\n","from sklearn.pipeline import Pipeline\n","from sklearn.model_selection import train_test_split\n","from sklearn.datasets import load_breast_cancer\n","dataset=load_breast_cancer()\n","df = pd.DataFrame(dataset.data, columns = dataset.feature_names)\n","df.sample(3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":227},"id":"-BIjkPr4b7nv","executionInfo":{"status":"ok","timestamp":1710957983929,"user_tz":-330,"elapsed":2958,"user":{"displayName":"Dheeraj Mishra","userId":"03451996925460727889"}},"outputId":"3debcad0-df96-45ff-e064-e06a00dbd379"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     mean radius  mean texture  mean perimeter  mean area  mean smoothness  \\\n","438        13.85         19.60           88.68      592.6          0.08684   \n","508        16.30         15.70          104.70      819.8          0.09427   \n","137        11.43         15.39           73.06      399.8          0.09639   \n","\n","     mean compactness  mean concavity  mean concave points  mean symmetry  \\\n","438           0.06330         0.01342              0.02293         0.1555   \n","508           0.06712         0.05526              0.04563         0.1711   \n","137           0.06889         0.03503              0.02875         0.1734   \n","\n","     mean fractal dimension  ...  worst radius  worst texture  \\\n","438                 0.05673  ...         15.63          28.01   \n","508                 0.05657  ...         17.32          17.76   \n","137                 0.05865  ...         12.32          22.02   \n","\n","     worst perimeter  worst area  worst smoothness  worst compactness  \\\n","438           100.90       749.1            0.1118             0.1141   \n","508           109.80       928.2            0.1354             0.1361   \n","137            79.93       462.0            0.1190             0.1648   \n","\n","     worst concavity  worst concave points  worst symmetry  \\\n","438          0.04753               0.05890          0.2513   \n","508          0.19470               0.13570          0.2300   \n","137          0.13990               0.08476          0.2676   \n","\n","     worst fractal dimension  \n","438                  0.06911  \n","508                  0.07230  \n","137                  0.06765  \n","\n","[3 rows x 30 columns]"],"text/html":["\n","  <div id=\"df-f4acb1f2-a321-4ab5-a811-bd5a561ed849\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>mean radius</th>\n","      <th>mean texture</th>\n","      <th>mean perimeter</th>\n","      <th>mean area</th>\n","      <th>mean smoothness</th>\n","      <th>mean compactness</th>\n","      <th>mean concavity</th>\n","      <th>mean concave points</th>\n","      <th>mean symmetry</th>\n","      <th>mean fractal dimension</th>\n","      <th>...</th>\n","      <th>worst radius</th>\n","      <th>worst texture</th>\n","      <th>worst perimeter</th>\n","      <th>worst area</th>\n","      <th>worst smoothness</th>\n","      <th>worst compactness</th>\n","      <th>worst concavity</th>\n","      <th>worst concave points</th>\n","      <th>worst symmetry</th>\n","      <th>worst fractal dimension</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>438</th>\n","      <td>13.85</td>\n","      <td>19.60</td>\n","      <td>88.68</td>\n","      <td>592.6</td>\n","      <td>0.08684</td>\n","      <td>0.06330</td>\n","      <td>0.01342</td>\n","      <td>0.02293</td>\n","      <td>0.1555</td>\n","      <td>0.05673</td>\n","      <td>...</td>\n","      <td>15.63</td>\n","      <td>28.01</td>\n","      <td>100.90</td>\n","      <td>749.1</td>\n","      <td>0.1118</td>\n","      <td>0.1141</td>\n","      <td>0.04753</td>\n","      <td>0.05890</td>\n","      <td>0.2513</td>\n","      <td>0.06911</td>\n","    </tr>\n","    <tr>\n","      <th>508</th>\n","      <td>16.30</td>\n","      <td>15.70</td>\n","      <td>104.70</td>\n","      <td>819.8</td>\n","      <td>0.09427</td>\n","      <td>0.06712</td>\n","      <td>0.05526</td>\n","      <td>0.04563</td>\n","      <td>0.1711</td>\n","      <td>0.05657</td>\n","      <td>...</td>\n","      <td>17.32</td>\n","      <td>17.76</td>\n","      <td>109.80</td>\n","      <td>928.2</td>\n","      <td>0.1354</td>\n","      <td>0.1361</td>\n","      <td>0.19470</td>\n","      <td>0.13570</td>\n","      <td>0.2300</td>\n","      <td>0.07230</td>\n","    </tr>\n","    <tr>\n","      <th>137</th>\n","      <td>11.43</td>\n","      <td>15.39</td>\n","      <td>73.06</td>\n","      <td>399.8</td>\n","      <td>0.09639</td>\n","      <td>0.06889</td>\n","      <td>0.03503</td>\n","      <td>0.02875</td>\n","      <td>0.1734</td>\n","      <td>0.05865</td>\n","      <td>...</td>\n","      <td>12.32</td>\n","      <td>22.02</td>\n","      <td>79.93</td>\n","      <td>462.0</td>\n","      <td>0.1190</td>\n","      <td>0.1648</td>\n","      <td>0.13990</td>\n","      <td>0.08476</td>\n","      <td>0.2676</td>\n","      <td>0.06765</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3 rows × 30 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f4acb1f2-a321-4ab5-a811-bd5a561ed849')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f4acb1f2-a321-4ab5-a811-bd5a561ed849 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f4acb1f2-a321-4ab5-a811-bd5a561ed849');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-caf2b948-ca9a-4620-b976-fa6c39ef47e8\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-caf2b948-ca9a-4620-b976-fa6c39ef47e8')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-caf2b948-ca9a-4620-b976-fa6c39ef47e8 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe"}},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["df['class'] = dataset.target #giving name to target column\n","df.sample(3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":227},"id":"ww390X0GemqD","executionInfo":{"status":"ok","timestamp":1710957988274,"user_tz":-330,"elapsed":405,"user":{"displayName":"Dheeraj Mishra","userId":"03451996925460727889"}},"outputId":"c454acd0-6bfa-43d1-fab4-a03ca23d2176"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     mean radius  mean texture  mean perimeter  mean area  mean smoothness  \\\n","406       16.140         14.86           104.3      800.0          0.09495   \n","416        9.405         21.70            59.6      271.2          0.10440   \n","32        17.020         23.98           112.8      899.3          0.11970   \n","\n","     mean compactness  mean concavity  mean concave points  mean symmetry  \\\n","406           0.08501         0.05500              0.04528         0.1735   \n","416           0.06159         0.02047              0.01257         0.2025   \n","32            0.14960         0.24170              0.12030         0.2248   \n","\n","     mean fractal dimension  ...  worst texture  worst perimeter  worst area  \\\n","406                 0.05875  ...          19.58           115.90       947.9   \n","416                 0.06601  ...          31.24            68.73       359.4   \n","32                  0.06382  ...          32.09           136.10      1344.0   \n","\n","     worst smoothness  worst compactness  worst concavity  \\\n","406            0.1206             0.1722          0.23100   \n","416            0.1526             0.1193          0.06141   \n","32             0.1634             0.3559          0.55880   \n","\n","     worst concave points  worst symmetry  worst fractal dimension  class  \n","406                0.1129          0.2778                  0.07012      1  \n","416                0.0377          0.2872                  0.08304      1  \n","32                 0.1847          0.3530                  0.08482      0  \n","\n","[3 rows x 31 columns]"],"text/html":["\n","  <div id=\"df-8a87eff3-351d-462f-933e-a6214bc41a01\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>mean radius</th>\n","      <th>mean texture</th>\n","      <th>mean perimeter</th>\n","      <th>mean area</th>\n","      <th>mean smoothness</th>\n","      <th>mean compactness</th>\n","      <th>mean concavity</th>\n","      <th>mean concave points</th>\n","      <th>mean symmetry</th>\n","      <th>mean fractal dimension</th>\n","      <th>...</th>\n","      <th>worst texture</th>\n","      <th>worst perimeter</th>\n","      <th>worst area</th>\n","      <th>worst smoothness</th>\n","      <th>worst compactness</th>\n","      <th>worst concavity</th>\n","      <th>worst concave points</th>\n","      <th>worst symmetry</th>\n","      <th>worst fractal dimension</th>\n","      <th>class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>406</th>\n","      <td>16.140</td>\n","      <td>14.86</td>\n","      <td>104.3</td>\n","      <td>800.0</td>\n","      <td>0.09495</td>\n","      <td>0.08501</td>\n","      <td>0.05500</td>\n","      <td>0.04528</td>\n","      <td>0.1735</td>\n","      <td>0.05875</td>\n","      <td>...</td>\n","      <td>19.58</td>\n","      <td>115.90</td>\n","      <td>947.9</td>\n","      <td>0.1206</td>\n","      <td>0.1722</td>\n","      <td>0.23100</td>\n","      <td>0.1129</td>\n","      <td>0.2778</td>\n","      <td>0.07012</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>416</th>\n","      <td>9.405</td>\n","      <td>21.70</td>\n","      <td>59.6</td>\n","      <td>271.2</td>\n","      <td>0.10440</td>\n","      <td>0.06159</td>\n","      <td>0.02047</td>\n","      <td>0.01257</td>\n","      <td>0.2025</td>\n","      <td>0.06601</td>\n","      <td>...</td>\n","      <td>31.24</td>\n","      <td>68.73</td>\n","      <td>359.4</td>\n","      <td>0.1526</td>\n","      <td>0.1193</td>\n","      <td>0.06141</td>\n","      <td>0.0377</td>\n","      <td>0.2872</td>\n","      <td>0.08304</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>32</th>\n","      <td>17.020</td>\n","      <td>23.98</td>\n","      <td>112.8</td>\n","      <td>899.3</td>\n","      <td>0.11970</td>\n","      <td>0.14960</td>\n","      <td>0.24170</td>\n","      <td>0.12030</td>\n","      <td>0.2248</td>\n","      <td>0.06382</td>\n","      <td>...</td>\n","      <td>32.09</td>\n","      <td>136.10</td>\n","      <td>1344.0</td>\n","      <td>0.1634</td>\n","      <td>0.3559</td>\n","      <td>0.55880</td>\n","      <td>0.1847</td>\n","      <td>0.3530</td>\n","      <td>0.08482</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3 rows × 31 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8a87eff3-351d-462f-933e-a6214bc41a01')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8a87eff3-351d-462f-933e-a6214bc41a01 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8a87eff3-351d-462f-933e-a6214bc41a01');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f6775e60-831d-4db9-8df4-3c4f417e6d72\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f6775e60-831d-4db9-8df4-3c4f417e6d72')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f6775e60-831d-4db9-8df4-3c4f417e6d72 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe"}},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XumyF7hEiEGd","executionInfo":{"status":"ok","timestamp":1710958006059,"user_tz":-330,"elapsed":456,"user":{"displayName":"Dheeraj Mishra","userId":"03451996925460727889"}},"outputId":"2a49db7c-001a-42ab-e4b2-44675fefa3f5"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 569 entries, 0 to 568\n","Data columns (total 31 columns):\n"," #   Column                   Non-Null Count  Dtype  \n","---  ------                   --------------  -----  \n"," 0   mean radius              569 non-null    float64\n"," 1   mean texture             569 non-null    float64\n"," 2   mean perimeter           569 non-null    float64\n"," 3   mean area                569 non-null    float64\n"," 4   mean smoothness          569 non-null    float64\n"," 5   mean compactness         569 non-null    float64\n"," 6   mean concavity           569 non-null    float64\n"," 7   mean concave points      569 non-null    float64\n"," 8   mean symmetry            569 non-null    float64\n"," 9   mean fractal dimension   569 non-null    float64\n"," 10  radius error             569 non-null    float64\n"," 11  texture error            569 non-null    float64\n"," 12  perimeter error          569 non-null    float64\n"," 13  area error               569 non-null    float64\n"," 14  smoothness error         569 non-null    float64\n"," 15  compactness error        569 non-null    float64\n"," 16  concavity error          569 non-null    float64\n"," 17  concave points error     569 non-null    float64\n"," 18  symmetry error           569 non-null    float64\n"," 19  fractal dimension error  569 non-null    float64\n"," 20  worst radius             569 non-null    float64\n"," 21  worst texture            569 non-null    float64\n"," 22  worst perimeter          569 non-null    float64\n"," 23  worst area               569 non-null    float64\n"," 24  worst smoothness         569 non-null    float64\n"," 25  worst compactness        569 non-null    float64\n"," 26  worst concavity          569 non-null    float64\n"," 27  worst concave points     569 non-null    float64\n"," 28  worst symmetry           569 non-null    float64\n"," 29  worst fractal dimension  569 non-null    float64\n"," 30  class                    569 non-null    int64  \n","dtypes: float64(30), int64(1)\n","memory usage: 137.9 KB\n"]}]},{"cell_type":"code","source":["df.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FiZC-LSziIq5","executionInfo":{"status":"ok","timestamp":1710958012855,"user_tz":-330,"elapsed":452,"user":{"displayName":"Dheeraj Mishra","userId":"03451996925460727889"}},"outputId":"7bc8221d-2b17-423e-e900-d985cf9075f7"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(569, 31)"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["logit_pl = Pipeline([('scaling' , StandardScaler()),\n","('pca', PCA(n_components=3)),\n","('model_logit' , LogisticRegression())])\n","dtree_pl = Pipeline([('scaling' , StandardScaler()),\n","('pca', PCA(n_components=3)),\n","('model_logit' , DecisionTreeClassifier())])\n","naive_pl = Pipeline([('scaling' , StandardScaler()),\n","('pca', PCA(n_components=3)),\n","('model_logit' , GaussianNB())])\n","x = df.iloc[:,:-1] #storing the desired features into x variable\n","y = df.iloc[:,-1] #storing the target feature into y variable"],"metadata":{"id":"ZfgKp9kaDgYU","executionInfo":{"status":"ok","timestamp":1710958469273,"user_tz":-330,"elapsed":653,"user":{"displayName":"Dheeraj Mishra","userId":"03451996925460727889"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["xtrain,xtest,ytrain,ytest = train_test_split(x,y,random_state = 1, test_size = 0.25)\n"],"metadata":{"id":"clT5Yc_xEloX","executionInfo":{"status":"ok","timestamp":1710958493186,"user_tz":-330,"elapsed":415,"user":{"displayName":"Dheeraj Mishra","userId":"03451996925460727889"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["my_pipeline = [logit_pl,dtree_pl,naive_pl]\n","pipeline_dict = {0:'Logistic_Regression', 1:'Decision_Tree',2:'Naive_Bayes'}\n","for i in my_pipeline:\n","  i.fit(xtrain,ytrain)"],"metadata":{"id":"eNPvo4o9ErgX","executionInfo":{"status":"ok","timestamp":1710958700326,"user_tz":-330,"elapsed":16,"user":{"displayName":"Dheeraj Mishra","userId":"03451996925460727889"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["for i, model in enumerate(my_pipeline):\n","  print(f\"{pipeline_dict[i]}'s trainig accuracy is {model.score(xtrain,ytrain)}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yvHQDRuEGig0","executionInfo":{"status":"ok","timestamp":1710959165617,"user_tz":-330,"elapsed":397,"user":{"displayName":"Dheeraj Mishra","userId":"03451996925460727889"}},"outputId":"5a4e7b7b-dde1-45be-d46a-c331be714ade"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["Logistic_Regression's trainig accuracy is 0.9671361502347418\n","Decision_Tree's trainig accuracy is 1.0\n","Naive_Bayes's trainig accuracy is 0.9225352112676056\n"]}]},{"cell_type":"code","source":["for i, model in enumerate(my_pipeline):\n","  print(f\"{pipeline_dict[i]}'s trainig accuracy is :{model.score(xtest,ytest)}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cIFNapDCHWvI","executionInfo":{"status":"ok","timestamp":1710959239882,"user_tz":-330,"elapsed":439,"user":{"displayName":"Dheeraj Mishra","userId":"03451996925460727889"}},"outputId":"5c9def34-a8b1-4169-d928-554a8d087cf1"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["Logistic_Regression's trainig accuracy is :0.9370629370629371\n","Decision_Tree's trainig accuracy is :0.9440559440559441\n","Naive_Bayes's trainig accuracy is :0.9090909090909091\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"eXofVcz-HhzL"},"execution_count":null,"outputs":[]}]}